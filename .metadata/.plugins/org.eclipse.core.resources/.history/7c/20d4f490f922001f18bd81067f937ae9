import java.util.ArrayList;
import java.util.List;

public class SudokoSolver {

	public static void main(String[] args) {
		// Sudoku tahtasını tanımla
		char[][] board = { { '5', '3', '.', '.', '7', '.', '.', '.', '.' },
				{ '6', '.', '.', '1', '9', '5', '.', '.', '.' }, { '.', '9', '8', '.', '.', '.', '.', '6', '.' },
				{ '8', '.', '.', '.', '6', '.', '.', '.', '3' }, { '4', '.', '.', '8', '.', '3', '.', '.', '1' },
				{ '7', '.', '.', '.', '2', '.', '.', '.', '6' }, { '.', '6', '.', '.', '.', '.', '2', '8', '.' },
				{ '.', '.', '.', '4', '1', '9', '.', '.', '5' }, { '.', '.', '.', '.', '8', '.', '.', '7', '9' } };

		// Çözülmüş Sudoku tahtasını yazdır

	}

	public char[][] solveSudoku(char[][] board) {
		
		Node node = new Node();
		Node temp = node;

		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board.length; j++) {

				if (board[i][j] == '.') {
					
					Node n = new Node();
					n.geri = temp;
					temp = n;

					board[i][j] = change(board[i][j], i, j, board);
				}
			}
		}

		return board;

	}

	public char change(char c, int i, int j, char[][] board) {

		List<Character> charList = new ArrayList<Character>();

		// Kendi

		for(int x = 0; x<=2 ; x++) {
			
			for(int y = 0; y<=2; y++) {
				
				if(board.length % i == 0) {
					
				}
			}
		
		}
		
		// Diğer satır ve stunlar

		return change(c, i, j, board);
	}

}

class Node{
	char val;
	Node ileri;
	Node geri;
}
